=======================
Quiz application models
=======================

Initialization
--------------

Test data is loaded automatically by django from fixtures/initial_data.

A big part of quiz application functionality depends on randomness, thus
we need to ensure consistent random numbers between all test runs:

    >>> import random
    >>> random.seed(42)
    >>> random.random()
    0.63942679845788375
    
    >>> from musicquiz.quiz.models import *


Quiz
----

Simple game
~~~~~~~~~~~

We will start by playing a simple quiz. Lets create a game:

    >>> quiz = Game.objects.create(quiz_length=5)
    >>> quiz.is_game_finished()
    False
    >>> quiz.has_started()
    False
    >>> quiz.remaining_questions()
    5
    
Now we want to look at the first question and try making our guess:

    >>> question = quiz.next_question()
    >>> question.is_answered()
    False
    >>> choices = question.create_choices(count=5)
    >>> print '\n'.join([str(t) for t in choices])
    The Knife – Heartbeats
    Arcade Fire – No Cars Go
    The Knife – Pass This On
    David Bowie – Ziggy Stardust
    Arcade Fire – Intervention

      
To submit an answer we have to pass a dictionary containing the primary key
of our answer track and a float number, which shows how much time remains
to submit an answer (the sooner you submit, the more points you get):
    
    >>> choices[3].artist
    <Artist: David Bowie>
    >>> answer_id = choices[3].id
    >>> question.make_guess({ 'answer' : answer_id, 'remaining_time' : 9.9 })
    
    >>> question.answered_correctly()
    True
    
Congratulations! Our answer was correct. Now lets see if we have answered
in time and also how many points do we get for this answer:

    >>> question.is_answered()
    True
    >>> question.is_timeout()
    False
    >>> '%.1f points' % question.points
    '9.9 points'
    
One important thing is that the correct answer to question must always
have youtube_code and youtube_info fields, as otherwise the application
would not be able to play it to the visitor:

    >>> question.correct_answer
    <Track: David Bowie – Ziggy Stardust>
    >>> question.correct_answer.youtube_code
    'XXq5VvYAI1Q'
    >>> question.correct_answer.youtube_duration
    '199'
    
Now we should move on to the next question:

    >>> question = quiz.next_question()
    
Visitors may possibly do not know an answer, but they can skip a question:

    >>> question.skip_question()
    >>> question.is_answered()
    True
    >>> question.answered_correctly()
    False
    >>> question.is_timeout()
    False
    >>> question.points
    0
    
We have already seen two questions, but the quiz is not finished yet:

    >>> quiz.is_game_finished()
    False
    >>> quiz.remaining_questions()
    3
    
Lets see what happens if we answer a question correctly, but after time:

    >>> question = quiz.next_question()
    >>> answer_id = question.correct_answer.id
    >>> question.make_guess({ 'answer' : answer_id, 'remaining_time' : 0 })
    
    >>> question.is_answered()
    True
    >>> question.answered_correctly()
    True
    >>> question.is_timeout()
    True
    >>> question.points
    0
    
Similar things happen when the user makes an incorrect guess after time:

    >>> question = quiz.next_question()
    >>> choices = question.create_choices()
    >>> correct = question.correct_answer
    >>> answer = choices[0] if correct != choices[0] else choices[1]
    >>> question.make_guess({ 'answer' : answer.id, 'remaining_time' : 0 })
    
    >>> question.is_answered()
    True
    >>> question.answered_correctly()
    False
    >>> question.is_timeout()
    True
    >>> question.points
    0
    
    >>> quiz.remaining_questions()
    1
    
There is only one more question to answer! Lets see what it is:

    >>> question = quiz.next_question()
    >>> quiz.remaining_questions()
    0
    >>> quiz.is_game_finished()
    False
    
We have not seen what happens if answer is incorrect and submitted in time:

    >>> choices = question.create_choices()
    >>> correct = question.correct_answer
    >>> answer = choices[0] if correct != choices[0] else choices[1]
    >>> question.make_guess({ 'answer' : answer.id, 'remaining_time' : 5 })
    
    >>> question.is_answered()
    True
    >>> question.answered_correctly()
    False
    >>> question.is_timeout()
    False
    >>> question.points
    -10
    
That was the last question. We can take a look at our performance:

    >>> quiz.is_game_finished()
    True
    >>> quiz.correct_answers()
    1
    >>> '%.1f' % quiz.total_score()
    '-0.1'
    
By the way, quiz is not allowed to contain the same question two times:

    >>> len(set(q.correct_answer for q in quiz.questions.all()))
    5

    
Error handling
~~~~~~~~~~~~~~

We want Game model to properly handle some of the errors.

User cannot request a new or current question from the game which has
already finished:

    >>> quiz.next_question()
    Traceback (most recent call last):
    ...
    QuizModelError: 'game is already over'
    
    >>> quiz.current_question()
    Traceback (most recent call last):
    ...
    QuizModelError: 'game is already over'
    
    >>> quiz = Game.objects.create(quiz_length=5)
    >>> while True:
    ...     quiz.next_question()
    Traceback (most recent call last):
    ...
    QuizModelError: 'there are no more questions left'
    
Similarly, if the game has not started, we can not request a current question:

    >>> new_game = Game.objects.create(quiz_length=10)
    >>> new_game.current_question()
    Traceback (most recent call last):
    ...
    QuizModelError: 'game has not started'

When user wants to see possible answers, he cannot request an empty list:

    >>> q = new_game.next_question()
    >>> new_game.current_question().create_choices(count=0)
    Traceback (most recent call last):
    ...
    ValueError: there must be at least one answer


Quiz created with a tag
~~~~~~~~~~~~~~~~~~~~~~~

In the quiz we played before all tracks were chosen randomly. There is a
possibility to create a game where all questions have something in common,
that is a common tag.

Before we begin, lets fetch some tracks with a tag 'classical':
    
    >>> Track.fetch_top_tracks(tag='classical')
    50
    
Now we have at least 50 tracks tagged with 'classical' and we are ready
to start a quiz based on that tag:

    >>> quiz = Game.objects.create(quiz_length=10)
    >>> quiz.tags = 'classical'
    
    >>> questions = [quiz.next_question() for i in range(quiz.quiz_length)]
    >>> print '\n'.join([str(q) for q in questions[:3]])
    #4 1. Johann Sebastian Bach – Toccata and Fugue in D Minor
    #4 2. Ludovico Einaudi – Primavera
    #4 3. Wolfgang Amadeus Mozart – Lacrimosa
    
For each such question, at least half of the possible answers must consist
of tracks, which are tagged with the same tag as correct answer (otherwise it
would be too easy to guess the correct answer).

    >>> first_question = questions[0]
    >>> choices = first_question.create_choices(count=10)
    >>> classical_tag = tagging.models.Tag.objects.get(name='classical')
    >>> sum(1 for c in choices if classical_tag in c.tags) >= 5
    True

    
Track
-----

Track model has a static method for picking a random track:
  
    >>> track = Track.pick_random()
    >>> track
    <Track: Ludwig van Beethoven – Für Elise>

We can pass a special argument `exclude` so that pick_random ignores those
tracks. We will check this functionality by contructing a special exclude
list, which contains all but one track:

    >>> all_tracks = list(Track.objects.all())
    >>> not_excluded = all_tracks[0]
    >>> exclude_list = all_tracks[1:]
    >>> Track.pick_random(exclude=exclude_list)
    <Track: David Bowie – Ziggy Stardust>
    >>> not_excluded
    <Track: David Bowie – Ziggy Stardust>
    
If we pass too strict exclusion list, we get an error:

    >>> Track.pick_random(exclude=Track.objects.all())
    Traceback (most recent call last):
    ...
    ValueError: could not pick any track
    

Another interesting feature is the ability to fetch the names of similar
tracks and save them in a local database:

    >>> joy_division = Artist.objects.create(name='Joy Division')
    >>> track = Track.objects.create(artist=joy_division, title='Disorder')
    >>> db_size_before = Track.objects.all().count()
    >>> created = track.fetch_similar(limit=3)
    >>> db_size_after = Track.objects.all().count()
    
    >>> created == db_size_after - db_size_before
    True
    
According to http://www.last.fm/music/Joy+Division/_/Disorder/+similar
the three most similar tracks are:

    1. Joy Division - Shadowplay        3:29    227,903
    2. Joy Division - New Dawn Fades    3:10    213,243
    3. New Order - Ceremony             4:22    174,121
    
Lets check if they have been added to our local database:

    >>> Track.objects.filter(title='Shadowplay')
    [<Track: Joy Division – Shadowplay>]
    
    >>> Track.objects.filter(title='New Dawn Fades')
    [<Track: Joy Division – New Dawn Fades>]
    
    >>> Track.objects.filter(title='Ceremony')
    [<Track: New Order – Ceremony>]
    
Function fetch_similar returns the count of NEWLY added songs, so if we
call it one more time with the same arguments, we should get zero:

    >>> track.fetch_similar(limit=3)
    0
    
    >>> track.fetch_similar(limit=4)
    1

If user calls fetch_similar with negative limit, we throw an exception at him:
    
    >>> track.fetch_similar(-1)
    Traceback (most recent call last):
    ...
    ValueError: limit must be a positive integer
    
    
There is another function for fetching data: fetch_top_tracks by tag.

Just like fetch_similar, it returns the count of newly added tracks:

    >>> Track.fetch_top_tracks(tag='queen')
    50
    
We will check a couple of tracks (http://www.last.fm/tag/queen/tracks):

    >>> queen_track = Track.objects.get(title='Bohemian Rhapsody')
    >>> queen_track.tags.filter(name='queen')
    [<Tag: queen>]
    
    >>> another_track = Track.objects.get(title='Flash')
    >>> another_track.tags.filter(name='queen')
    [<Tag: queen>]
    
    >>> from tagging.models import Tag, TaggedItem
    >>> queen_tag = Tag.objects.get(name='queen')
    >>> tagged = TaggedItem.objects.get_by_model(Track, queen_tag)
    >>> queen_track in tagged
    True
    >>> another_track in tagged
    True

Calling fetch_top_tracks second time with the same arguments gives zero:

    >>> Track.fetch_top_tracks(tag='queen')
    0
    
Make sure there are no problems with tags consisting of more than one word:

    >>> Track.fetch_top_tracks(tag='kate bush')
    50
    >>> tag = Tag.objects.get(name='kate bush')
    >>> babooshka = Track.objects.get(title='Babooshka')
    >>> tagged = TaggedItem.objects.get_by_model(Track, tag)
    >>> babooshka in tagged
    True
    
    >>> babooshka.tags
    [<Tag: kate bush>]
    
If we supply a tag which has no related tracks in last.fm, we get zero:

    >>> Track.fetch_top_tracks(tag='1w1gfh2_random_tag_no_results666')
    0
